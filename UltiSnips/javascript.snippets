priority -50

############
#  COMMON  #
############

# The smart snippets use a global options called
# "g:ultisnips_javascript.{option}" which can control the format
# of trailing semicolon, space before function paren, etc.
#
# e.g.
# let g:ultisnips_javascript = {
#      \ 'keyword-spacing': 'always',
#      \ 'semi': 'never',
#      \ 'space-before-function-paren': 'always',
#      \ }


global !p
from javascript_snippets import (
	semi, space_before_function_paren, keyword_spacing
)
endglobal


snippet vaf
var ${1:function_name} = function`!p snip.rv = space_before_function_paren(snip)`(${2}) {
	${0:${VISUAL}}
};
endsnippet

snippet (f
(function(${1}) {
	${0:${VISUAL}}
}(${2}));
endsnippet

snippet sdf
var ${1:function_name} = function`!p snip.rv = space_before_function_paren(snip)`(${2:argument}) {
	${3}

	$1 = function ($2) {
		${0:${VISUAL}}
	};
};
endsnippet

snippet if?: "condition ? if-true : if-false"
${1:/* condition */} ? ${2:/* if true */} : ${0:/* if false */}
endsnippet

snippet try "try { ... } catch(e) { ... }"
try {
	${0:${VISUAL}}
} catch (${1:e}) {
	${2:/* handle error */}
}
endsnippet

snippet tryf "try { ... } catch(e) { ... } finally { ... }"
try {
	${0:${VISUAL}}
} catch (${1:e}) {
	${2:/* handle error */}
} finally {
	${3:/* be executed regardless of the try / catch result*/}
}
endsnippet

snippet terr "throw new Error(...)"
throw new Error('${1:error message}')
endsnippet

snippet for "for (...) {...}"
for (var ${1:i} = 0, ${2:len} = ${3:Things.length}; $1 < $2; $1++) {
	${0:${VISUAL}}
}
endsnippet

snippet forr "reversed for (...) {...}"
for (var ${2:i} = ${1:Things.length} - 1; $2 >= 0; $2--) {
	${0:${VISUAL}}
}
endsnippet

snippet wh "(condition) { ... }"
while (${1:/* condition */}) {
	${0:${VISUAL}}
}
endsnippet

snippet fori "for (... in ...)"
for (var ${1:prop} in ${2:object}) {
	${0:$2[$1]}
}

endsnippet

snippet has
hasOwnProperty(${0})
endsnippet

snippet sing
function ${1:Singleton} (${2:argument}) {
	// the cached instance
	var instance;

	// rewrite the constructor
	$1 = function $1($2) {
		return instance;
	};

	// carry over the prototype properties
	$1.prototype = this;

	// the instance
	instance = new $1();

	// reset the constructor pointer
	instance.constructor = $1;

	${0}

	return instance;
}
endsnippet

snippet obj
function object(o) {
	function F() {}
	F.prototype = o;
	return new F();
}
endsnippet

snippet props
var ${1:my_object} = Object.defineProperties(
	${2:new Object()},
	{
		${3:property} : {
			get : function $1_$3_getter() {
				// getter code
			},
			set : function $1_$3_setter(value) {
				// setter code
			},
			value        : ${4:value},
			writeable    : ${5:boolean},
			enumerable   : ${6:boolean},
			configurable : ${0:boolean}
		}
	}
);
endsnippet

snippet prop
Object.defineProperty(
	${1:object},
	'${2:property}',
	{
		get : function $1_$2_getter() {
			// getter code
		},
		set : function $1_$2_setter(value) {
			// setter code
		},
		value        : ${3:value},
		writeable    : ${4:boolean},
		enumerable   : ${5:boolean},
		configurable : ${0:boolean}
	}
);
endsnippet

snippet /**
/**
 * ${0:description}
 *
 */
endsnippet

snippet jsonp "JSON.parse(...)"
JSON.parse(${0:jstr});
endsnippet

snippet jsons "JSON.stringify(...)"
JSON.stringify(${0:object});
endsnippet

snippet gett
getElementBy${1:Id}('${0}')
endsnippet

snippet by.
${1:document}.getElementsByClassName('${0:class}')
endsnippet

snippet by#
${1:document}.getElementById('${0:element ID}')
endsnippet

snippet qs
${1:document}.querySelector('${0:CSS selector}')
endsnippet

snippet qsa
${1:document}.querySelectorAll('${0:CSS selector}')
endsnippet

snippet de
debugger;
endsnippet

snippet cl "console.log"
console.log(${0});
endsnippet

snippet cd "console.debug"
console.debug(${0});
endsnippet

snippet ce "console.error"
console.error(${0});
endsnippet

snippet cw "console.warn"
console.warn(${0});
endsnippet

snippet ci "console.info"
console.info(${0});
endsnippet

snippet ct "console.trace"
console.trace(${0:label});
endsnippet

snippet ctime "console.time ... console.timeEnd"
console.time("${1:label}");
${0:${VISUAL}}
console.timeEnd("$1");
endsnippet

snippet ctimestamp "console.timeStamp"
console.timeStamp("${1:label}");
endsnippet

snippet ca "console.assert"
console.assert(${1:expression}, ${0:obj});
endsnippet

snippet cclear "console.clear"
console.clear();
endsnippet

snippet cdir "console.dir"
console.dir(${0:obj});
endsnippet

snippet cdirx "console.dirxml"
console.dirxml(${1:object});
endsnippet

snippet cgroup "console.group"
console.group("${1:label}");
${0:${VISUAL}}
console.groupEnd();
endsnippet

snippet cgroupc "console.groupCollapsed"
console.groupCollapsed("${1:label}");
${0:${VISUAL}}
console.groupEnd();
endsnippet

snippet cprof "console.profile"
console.profile("${1:label}");
${0:${VISUAL}}
console.profileEnd();
endsnippet

snippet ctable "console.table"
console.table(${1:"${2:value}"});
endsnippet

